services:
  postgres:
    image: postgres:14
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 15s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - "./backend:/backend"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_started
    env_file:
      - .env

  landing:
    image: nenad2807/royaltyx.landing:1.0
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - "./frontend:/app"
      - "/app/node_modules"
    env_file:
      - .env

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    command: celery -A royaltyx worker -l info -E
    volumes:
      - ./backend:/backend
    working_dir: /backend
    depends_on:
      - redis
    env_file:
      - .env

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    command: celery -A royaltyx beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/backend
    working_dir: /backend
    depends_on:
      - redis
      - backend
    env_file:
      - .env

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  memcached:
    image: memcached:1.6
    ports:
      - "11211:11211"

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    command: celery -A royaltyx flower --port=5555 --broker=redis://redis:6379/0
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/backend
    working_dir: /backend
    depends_on:
      - redis
    env_file:
      - .env

  nginx:
    image: nginx:1.25
    depends_on:
      - backend
      - frontend
      - landing
      - flower
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certificates:/etc/letsencrypt:ro
      - ./nginx/html:/usr/share/nginx/html
      - ./backend/media:/backend/media:ro
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certificates:/etc/letsencrypt
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - nginx
    command: sh -c "trap exit TERM; while :; do certbot renew --webroot -w /usr/share/nginx/html --quiet; sleep 12h; done"

volumes:
  postgres_data:
  frontend-build:
